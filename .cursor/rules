# Fincheck Web - Cursor Rules

This is a React project built with Vite, TypeScript, and TailwindCSS for styling. The package manager used is PNPM.

## Language and Communication

- All code, comments, and commit messages must be written in English
- Commit messages must follow Conventional Commits standard (e.g., "feat: add modal component")
- Respond to user queries in Portuguese (as per user preference)

## Project Structure and Architecture

### Technology Stack

- **Frontend Framework**: React 19.1.0 with TypeScript
- **Build Tool**: Vite with SWC plugin for fast compilation
- **Styling**: TailwindCSS with custom color palette and animations
- **State Management**: React Query (@tanstack/react-query) for server state
- **Form Handling**: React Hook Form with Zod validation
- **Routing**: React Router DOM
- **HTTP Client**: Axios
- **UI Components**: Headless UI and Radix UI components
- **Package Manager**: PNPM

### File Organization

```
src/
├── app/                    # Application core logic
│   ├── config/            # Configuration files and constants
│   ├── contexts/          # React contexts
│   ├── hooks/             # Custom hooks
│   └── services/          # API services
├── ui/                    # User interface components
│   ├── components/        # Reusable UI components
│   ├── layouts/           # Layout components
│   └── pages/             # Page components
├── utils/                 # Utility functions
└── assets/               # Static assets
```

## Code Standards and Conventions

### TypeScript

- Use TypeScript type aliases (`type`) instead of interfaces for component props
- Leverage `ComponentProps<'element'>` for extending native HTML element props
- Use strict typing with proper type definitions

### React Components

- Use function declarations for components: `export function ComponentName()`
- Props should be defined using type aliases: `type ComponentProps = { ... }`
- Use destructuring with default values in component parameters
- Implement proper children typing with `ReactNode`

### Styling with TailwindCSS

- Use the custom `cn()` utility function (clsx + tailwind-merge) for conditional classes
- Follow the custom color palette defined in tailwind.config.js:
  - Primary: `teal-*` (main brand color)
  - Success: `green-*`
  - Error: `red-*`
  - Neutral: `gray-*`
- Use custom animations: `slide-up-and-fade`, `slide-down-and-fade`, `overlay-show`, `content-show`
- Font family: DM Sans (configured in Tailwind)

### State Management

- Use React Query for server state management
- Define query keys in `src/app/config/react-query-keys.ts`
- Use React Context for global client state (see AuthContext pattern)
- Implement custom hooks for component logic (e.g., `useLoginController`)

### File Naming Conventions

- Components: PascalCase (e.g., `Button.tsx`, `UserMenu.tsx`)
- Hooks: camelCase starting with 'use' (e.g., `useAuth.ts`)
- Services: PascalCase with 'Service' suffix (e.g., `AuthService/`)
- Utils: camelCase (e.g., `formatCurrency.ts`)
- Constants: camelCase (e.g., `local-storage-keys.ts`)

### Import Organization

- Use ESLint plugin `simple-import-sort` for automatic import sorting
- Use path alias `@/` for src directory imports
- Group imports: external libraries, internal modules, relative imports

### API Services Structure

- Organize services in dedicated folders (e.g., `AuthService/`, `UsersService/`)
- Each service has an `index.ts` file that exports all methods
- Individual methods in separate files (e.g., `sign-in.ts`, `sign-up.ts`)

### Error Handling

- Use react-hot-toast for user notifications
- Implement proper error boundaries where needed
- Handle API errors gracefully with user-friendly messages

### Component Patterns

- Use compound component patterns where appropriate
- Implement loading states with the Spinner component
- Use proper disabled states for interactive elements
- Follow accessibility best practices

### Development Tools

- ESLint with TypeScript, React Hooks, and Prettier integration
- Prettier with Tailwind plugin for class sorting
- React Query DevTools for development
- Vite for fast development server and building

## Best Practices

1. Always use the `cn()` utility for className composition
2. Implement proper TypeScript typing for all props and functions
3. Use React Query for all API calls and caching
4. Follow the established folder structure and naming conventions
5. Write semantic and accessible HTML
6. Use proper error handling and loading states
7. Keep components focused and single-responsibility
8. Use custom hooks to extract and reuse component logic
9. Implement proper form validation with React Hook Form and Zod
10. Follow the established patterns for contexts and providers

## Commands

- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm lint` - Run ESLint
- `pnpm lint:fix` - Fix ESLint issues
- `pnpm format` - Format code with Prettier
- `pnpm preview` - Preview production build
